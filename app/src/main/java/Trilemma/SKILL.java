package Trilemma;

import Trilemma.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SKILL.
 */
public class SKILL {

    private Long id;
    private String skill_name;
    private Integer skill_point;
    private Integer effect_point;
    private Long skill_type_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SKILLDao myDao;

    private M_SKILLTYPE m_SKILLTYPE;
    private Long m_SKILLTYPE__resolvedKey;


    public SKILL() {
    }

    public SKILL(Long id) {
        this.id = id;
    }

    public SKILL(Long id, String skill_name, Integer skill_point, Integer effect_point, Long skill_type_id) {
        this.id = id;
        this.skill_name = skill_name;
        this.skill_point = skill_point;
        this.effect_point = effect_point;
        this.skill_type_id = skill_type_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSKILLDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSkill_name() {
        return skill_name;
    }

    public void setSkill_name(String skill_name) {
        this.skill_name = skill_name;
    }

    public Integer getSkill_point() {
        return skill_point;
    }

    public void setSkill_point(Integer skill_point) {
        this.skill_point = skill_point;
    }

    public Integer getEffect_point() {
        return effect_point;
    }

    public void setEffect_point(Integer effect_point) {
        this.effect_point = effect_point;
    }

    public Long getSkill_type_id() {
        return skill_type_id;
    }

    public void setSkill_type_id(Long skill_type_id) {
        this.skill_type_id = skill_type_id;
    }

    /** To-one relationship, resolved on first access. */
    public M_SKILLTYPE getM_SKILLTYPE() {
        Long __key = this.skill_type_id;
        if (m_SKILLTYPE__resolvedKey == null || !m_SKILLTYPE__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            M_SKILLTYPEDao targetDao = daoSession.getM_SKILLTYPEDao();
            M_SKILLTYPE m_SKILLTYPENew = targetDao.load(__key);
            synchronized (this) {
                m_SKILLTYPE = m_SKILLTYPENew;
            	m_SKILLTYPE__resolvedKey = __key;
            }
        }
        return m_SKILLTYPE;
    }

    public void setM_SKILLTYPE(M_SKILLTYPE m_SKILLTYPE) {
        synchronized (this) {
            this.m_SKILLTYPE = m_SKILLTYPE;
            skill_type_id = m_SKILLTYPE == null ? null : m_SKILLTYPE.getId();
            m_SKILLTYPE__resolvedKey = skill_type_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
