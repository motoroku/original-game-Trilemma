package Trilemma;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import Trilemma.MONSTER;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MONSTER.
*/
public class MONSTERDao extends AbstractDao<MONSTER, Long> {

    public static final String TABLENAME = "MONSTER";

    /**
     * Properties of entity MONSTER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Character_name = new Property(1, String.class, "character_name", false, "CHARACTER_NAME");
        public final static Property Image_no = new Property(2, Integer.class, "image_no", false, "IMAGE_NO");
        public final static Property Level = new Property(3, Integer.class, "level", false, "LEVEL");
        public final static Property Max_hp = new Property(4, Integer.class, "max_hp", false, "MAX_HP");
        public final static Property Max_sp = new Property(5, Integer.class, "max_sp", false, "MAX_SP");
        public final static Property Base_sp = new Property(6, Integer.class, "base_sp", false, "BASE_SP");
        public final static Property Attack_power = new Property(7, Integer.class, "attack_power", false, "ATTACK_POWER");
        public final static Property Defense_power = new Property(8, Integer.class, "defense_power", false, "DEFENSE_POWER");
        public final static Property Base_attack_rate = new Property(9, Integer.class, "base_attack_rate", false, "BASE_ATTACK_RATE");
        public final static Property Base_defense_rate = new Property(10, Integer.class, "base_defense_rate", false, "BASE_DEFENSE_RATE");
        public final static Property Base_charge_rate = new Property(11, Integer.class, "base_charge_rate", false, "BASE_CHARGE_RATE");
        public final static Property Profit_gold = new Property(12, Integer.class, "profit_gold", false, "PROFIT_GOLD");
        public final static Property Profit_exp = new Property(13, Integer.class, "profit_exp", false, "PROFIT_EXP");
        public final static Property Dungeon_id = new Property(14, Long.class, "dungeon_id", false, "DUNGEON_ID");
    };

    private DaoSession daoSession;


    public MONSTERDao(DaoConfig config) {
        super(config);
    }
    
    public MONSTERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MONSTER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CHARACTER_NAME' TEXT," + // 1: character_name
                "'IMAGE_NO' INTEGER," + // 2: image_no
                "'LEVEL' INTEGER," + // 3: level
                "'MAX_HP' INTEGER," + // 4: max_hp
                "'MAX_SP' INTEGER," + // 5: max_sp
                "'BASE_SP' INTEGER," + // 6: base_sp
                "'ATTACK_POWER' INTEGER," + // 7: attack_power
                "'DEFENSE_POWER' INTEGER," + // 8: defense_power
                "'BASE_ATTACK_RATE' INTEGER," + // 9: base_attack_rate
                "'BASE_DEFENSE_RATE' INTEGER," + // 10: base_defense_rate
                "'BASE_CHARGE_RATE' INTEGER," + // 11: base_charge_rate
                "'PROFIT_GOLD' INTEGER," + // 12: profit_gold
                "'PROFIT_EXP' INTEGER," + // 13: profit_exp
                "'DUNGEON_ID' INTEGER);"); // 14: dungeon_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MONSTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MONSTER entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String character_name = entity.getCharacter_name();
        if (character_name != null) {
            stmt.bindString(2, character_name);
        }
 
        Integer image_no = entity.getImage_no();
        if (image_no != null) {
            stmt.bindLong(3, image_no);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(4, level);
        }
 
        Integer max_hp = entity.getMax_hp();
        if (max_hp != null) {
            stmt.bindLong(5, max_hp);
        }
 
        Integer max_sp = entity.getMax_sp();
        if (max_sp != null) {
            stmt.bindLong(6, max_sp);
        }
 
        Integer base_sp = entity.getBase_sp();
        if (base_sp != null) {
            stmt.bindLong(7, base_sp);
        }
 
        Integer attack_power = entity.getAttack_power();
        if (attack_power != null) {
            stmt.bindLong(8, attack_power);
        }
 
        Integer defense_power = entity.getDefense_power();
        if (defense_power != null) {
            stmt.bindLong(9, defense_power);
        }
 
        Integer base_attack_rate = entity.getBase_attack_rate();
        if (base_attack_rate != null) {
            stmt.bindLong(10, base_attack_rate);
        }
 
        Integer base_defense_rate = entity.getBase_defense_rate();
        if (base_defense_rate != null) {
            stmt.bindLong(11, base_defense_rate);
        }
 
        Integer base_charge_rate = entity.getBase_charge_rate();
        if (base_charge_rate != null) {
            stmt.bindLong(12, base_charge_rate);
        }
 
        Integer profit_gold = entity.getProfit_gold();
        if (profit_gold != null) {
            stmt.bindLong(13, profit_gold);
        }
 
        Integer profit_exp = entity.getProfit_exp();
        if (profit_exp != null) {
            stmt.bindLong(14, profit_exp);
        }
 
        Long dungeon_id = entity.getDungeon_id();
        if (dungeon_id != null) {
            stmt.bindLong(15, dungeon_id);
        }
    }

    @Override
    protected void attachEntity(MONSTER entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MONSTER readEntity(Cursor cursor, int offset) {
        MONSTER entity = new MONSTER( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // character_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // image_no
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // max_hp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // max_sp
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // base_sp
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // attack_power
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // defense_power
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // base_attack_rate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // base_defense_rate
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // base_charge_rate
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // profit_gold
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // profit_exp
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // dungeon_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MONSTER entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCharacter_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_no(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLevel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMax_hp(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMax_sp(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBase_sp(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAttack_power(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDefense_power(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBase_attack_rate(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBase_defense_rate(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBase_charge_rate(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setProfit_gold(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setProfit_exp(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setDungeon_id(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MONSTER entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MONSTER entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDUNGEONDao().getAllColumns());
            builder.append(" FROM MONSTER T");
            builder.append(" LEFT JOIN DUNGEON T0 ON T.'DUNGEON_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MONSTER loadCurrentDeep(Cursor cursor, boolean lock) {
        MONSTER entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DUNGEON dUNGEON = loadCurrentOther(daoSession.getDUNGEONDao(), cursor, offset);
        entity.setDUNGEON(dUNGEON);

        return entity;    
    }

    public MONSTER loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MONSTER> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MONSTER> list = new ArrayList<MONSTER>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MONSTER> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MONSTER> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
