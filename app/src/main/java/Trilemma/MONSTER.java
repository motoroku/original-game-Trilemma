package Trilemma;

import java.util.List;
import Trilemma.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MONSTER.
 */
public class MONSTER {

    private Long id;
    private String character_name;
    private Integer image_no;
    private Integer level;
    private Integer max_hp;
    private Integer max_sp;
    private Integer base_sp;
    private Integer attack_power;
    private Integer defense_power;
    private Integer base_attack_rate;
    private Integer base_defense_rate;
    private Integer base_charge_rate;
    private Integer profit_gold;
    private Integer profit_exp;
    private Long dungeon_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MONSTERDao myDao;

    private DUNGEON dUNGEON;
    private Long dUNGEON__resolvedKey;

    private List<LEARNED_SKILL> skillList;

    public MONSTER() {
    }

    public MONSTER(Long id) {
        this.id = id;
    }

    public MONSTER(Long id, String character_name, Integer image_no, Integer level, Integer max_hp, Integer max_sp, Integer base_sp, Integer attack_power, Integer defense_power, Integer base_attack_rate, Integer base_defense_rate, Integer base_charge_rate, Integer profit_gold, Integer profit_exp, Long dungeon_id) {
        this.id = id;
        this.character_name = character_name;
        this.image_no = image_no;
        this.level = level;
        this.max_hp = max_hp;
        this.max_sp = max_sp;
        this.base_sp = base_sp;
        this.attack_power = attack_power;
        this.defense_power = defense_power;
        this.base_attack_rate = base_attack_rate;
        this.base_defense_rate = base_defense_rate;
        this.base_charge_rate = base_charge_rate;
        this.profit_gold = profit_gold;
        this.profit_exp = profit_exp;
        this.dungeon_id = dungeon_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMONSTERDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCharacter_name() {
        return character_name;
    }

    public void setCharacter_name(String character_name) {
        this.character_name = character_name;
    }

    public Integer getImage_no() {
        return image_no;
    }

    public void setImage_no(Integer image_no) {
        this.image_no = image_no;
    }

    public Integer getLevel() {
        return level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    public Integer getMax_hp() {
        return max_hp;
    }

    public void setMax_hp(Integer max_hp) {
        this.max_hp = max_hp;
    }

    public Integer getMax_sp() {
        return max_sp;
    }

    public void setMax_sp(Integer max_sp) {
        this.max_sp = max_sp;
    }

    public Integer getBase_sp() {
        return base_sp;
    }

    public void setBase_sp(Integer base_sp) {
        this.base_sp = base_sp;
    }

    public Integer getAttack_power() {
        return attack_power;
    }

    public void setAttack_power(Integer attack_power) {
        this.attack_power = attack_power;
    }

    public Integer getDefense_power() {
        return defense_power;
    }

    public void setDefense_power(Integer defense_power) {
        this.defense_power = defense_power;
    }

    public Integer getBase_attack_rate() {
        return base_attack_rate;
    }

    public void setBase_attack_rate(Integer base_attack_rate) {
        this.base_attack_rate = base_attack_rate;
    }

    public Integer getBase_defense_rate() {
        return base_defense_rate;
    }

    public void setBase_defense_rate(Integer base_defense_rate) {
        this.base_defense_rate = base_defense_rate;
    }

    public Integer getBase_charge_rate() {
        return base_charge_rate;
    }

    public void setBase_charge_rate(Integer base_charge_rate) {
        this.base_charge_rate = base_charge_rate;
    }

    public Integer getProfit_gold() {
        return profit_gold;
    }

    public void setProfit_gold(Integer profit_gold) {
        this.profit_gold = profit_gold;
    }

    public Integer getProfit_exp() {
        return profit_exp;
    }

    public void setProfit_exp(Integer profit_exp) {
        this.profit_exp = profit_exp;
    }

    public Long getDungeon_id() {
        return dungeon_id;
    }

    public void setDungeon_id(Long dungeon_id) {
        this.dungeon_id = dungeon_id;
    }

    /** To-one relationship, resolved on first access. */
    public DUNGEON getDUNGEON() {
        Long __key = this.dungeon_id;
        if (dUNGEON__resolvedKey == null || !dUNGEON__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DUNGEONDao targetDao = daoSession.getDUNGEONDao();
            DUNGEON dUNGEONNew = targetDao.load(__key);
            synchronized (this) {
                dUNGEON = dUNGEONNew;
            	dUNGEON__resolvedKey = __key;
            }
        }
        return dUNGEON;
    }

    public void setDUNGEON(DUNGEON dUNGEON) {
        synchronized (this) {
            this.dUNGEON = dUNGEON;
            dungeon_id = dUNGEON == null ? null : dUNGEON.getId();
            dUNGEON__resolvedKey = dungeon_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LEARNED_SKILL> getSkillList() {
        if (skillList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LEARNED_SKILLDao targetDao = daoSession.getLEARNED_SKILLDao();
            List<LEARNED_SKILL> skillListNew = targetDao._queryMONSTER_SkillList(id);
            synchronized (this) {
                if(skillList == null) {
                    skillList = skillListNew;
                }
            }
        }
        return skillList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSkillList() {
        skillList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
