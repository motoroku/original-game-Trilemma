package Trilemma;

import Trilemma.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table M__SKILLTYPE.
 */
public class M_SKILLTYPE {

    private Long id;
    private String skill_type_name;
    private Long action_status_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient M_SKILLTYPEDao myDao;

    private M_ACTIONSTATUS m_ACTIONSTATUS;
    private Long m_ACTIONSTATUS__resolvedKey;


    public M_SKILLTYPE() {
    }

    public M_SKILLTYPE(Long id) {
        this.id = id;
    }

    public M_SKILLTYPE(Long id, String skill_type_name, Long action_status_id) {
        this.id = id;
        this.skill_type_name = skill_type_name;
        this.action_status_id = action_status_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getM_SKILLTYPEDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSkill_type_name() {
        return skill_type_name;
    }

    public void setSkill_type_name(String skill_type_name) {
        this.skill_type_name = skill_type_name;
    }

    public Long getAction_status_id() {
        return action_status_id;
    }

    public void setAction_status_id(Long action_status_id) {
        this.action_status_id = action_status_id;
    }

    /** To-one relationship, resolved on first access. */
    public M_ACTIONSTATUS getM_ACTIONSTATUS() {
        Long __key = this.action_status_id;
        if (m_ACTIONSTATUS__resolvedKey == null || !m_ACTIONSTATUS__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            M_ACTIONSTATUSDao targetDao = daoSession.getM_ACTIONSTATUSDao();
            M_ACTIONSTATUS m_ACTIONSTATUSNew = targetDao.load(__key);
            synchronized (this) {
                m_ACTIONSTATUS = m_ACTIONSTATUSNew;
            	m_ACTIONSTATUS__resolvedKey = __key;
            }
        }
        return m_ACTIONSTATUS;
    }

    public void setM_ACTIONSTATUS(M_ACTIONSTATUS m_ACTIONSTATUS) {
        synchronized (this) {
            this.m_ACTIONSTATUS = m_ACTIONSTATUS;
            action_status_id = m_ACTIONSTATUS == null ? null : m_ACTIONSTATUS.getId();
            m_ACTIONSTATUS__resolvedKey = action_status_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
