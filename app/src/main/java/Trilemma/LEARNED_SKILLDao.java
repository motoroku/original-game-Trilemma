package Trilemma;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import Trilemma.LEARNED_SKILL;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LEARNED__SKILL.
*/
public class LEARNED_SKILLDao extends AbstractDao<LEARNED_SKILL, Long> {

    public static final String TABLENAME = "LEARNED__SKILL";

    /**
     * Properties of entity LEARNED_SKILL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Position_no = new Property(1, Integer.class, "position_no", false, "POSITION_NO");
        public final static Property Is_set_flg = new Property(2, Boolean.class, "is_set_flg", false, "IS_SET_FLG");
        public final static Property Character_id = new Property(3, long.class, "character_id", false, "CHARACTER_ID");
        public final static Property Skill_id = new Property(4, Long.class, "skill_id", false, "SKILL_ID");
        public final static Property Dungeon_id = new Property(5, Long.class, "dungeon_id", false, "DUNGEON_ID");
    };

    private DaoSession daoSession;

    private Query<LEARNED_SKILL> mONSTER_SkillListQuery;

    public LEARNED_SKILLDao(DaoConfig config) {
        super(config);
    }
    
    public LEARNED_SKILLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LEARNED__SKILL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'POSITION_NO' INTEGER," + // 1: position_no
                "'IS_SET_FLG' INTEGER," + // 2: is_set_flg
                "'CHARACTER_ID' INTEGER NOT NULL ," + // 3: character_id
                "'SKILL_ID' INTEGER," + // 4: skill_id
                "'DUNGEON_ID' INTEGER);"); // 5: dungeon_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LEARNED__SKILL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LEARNED_SKILL entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer position_no = entity.getPosition_no();
        if (position_no != null) {
            stmt.bindLong(2, position_no);
        }
 
        Boolean is_set_flg = entity.getIs_set_flg();
        if (is_set_flg != null) {
            stmt.bindLong(3, is_set_flg ? 1l: 0l);
        }
        stmt.bindLong(4, entity.getCharacter_id());
 
        Long skill_id = entity.getSkill_id();
        if (skill_id != null) {
            stmt.bindLong(5, skill_id);
        }
 
        Long dungeon_id = entity.getDungeon_id();
        if (dungeon_id != null) {
            stmt.bindLong(6, dungeon_id);
        }
    }

    @Override
    protected void attachEntity(LEARNED_SKILL entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LEARNED_SKILL readEntity(Cursor cursor, int offset) {
        LEARNED_SKILL entity = new LEARNED_SKILL( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // position_no
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // is_set_flg
            cursor.getLong(offset + 3), // character_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // skill_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // dungeon_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LEARNED_SKILL entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition_no(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIs_set_flg(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCharacter_id(cursor.getLong(offset + 3));
        entity.setSkill_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDungeon_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LEARNED_SKILL entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LEARNED_SKILL entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "skillList" to-many relationship of MONSTER. */
    public List<LEARNED_SKILL> _queryMONSTER_SkillList(long character_id) {
        synchronized (this) {
            if (mONSTER_SkillListQuery == null) {
                QueryBuilder<LEARNED_SKILL> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Character_id.eq(null));
                mONSTER_SkillListQuery = queryBuilder.build();
            }
        }
        Query<LEARNED_SKILL> query = mONSTER_SkillListQuery.forCurrentThread();
        query.setParameter(0, character_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSKILLDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDUNGEONDao().getAllColumns());
            builder.append(" FROM LEARNED__SKILL T");
            builder.append(" LEFT JOIN SKILL T0 ON T.'SKILL_ID'=T0.'_id'");
            builder.append(" LEFT JOIN DUNGEON T1 ON T.'DUNGEON_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LEARNED_SKILL loadCurrentDeep(Cursor cursor, boolean lock) {
        LEARNED_SKILL entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SKILL sKILL = loadCurrentOther(daoSession.getSKILLDao(), cursor, offset);
        entity.setSKILL(sKILL);
        offset += daoSession.getSKILLDao().getAllColumns().length;

        DUNGEON dUNGEON = loadCurrentOther(daoSession.getDUNGEONDao(), cursor, offset);
        entity.setDUNGEON(dUNGEON);

        return entity;    
    }

    public LEARNED_SKILL loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LEARNED_SKILL> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LEARNED_SKILL> list = new ArrayList<LEARNED_SKILL>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LEARNED_SKILL> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LEARNED_SKILL> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
