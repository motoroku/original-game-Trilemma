package Trilemma;

import Trilemma.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PEOPLE.
 */
public class PEOPLE {

    private Long id;
    private Integer imgae_no;
    private String people_name;
    private String serif;
    private Long town_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PEOPLEDao myDao;

    private TOWN tOWN;
    private Long tOWN__resolvedKey;


    public PEOPLE() {
    }

    public PEOPLE(Long id) {
        this.id = id;
    }

    public PEOPLE(Long id, Integer imgae_no, String people_name, String serif, Long town_id) {
        this.id = id;
        this.imgae_no = imgae_no;
        this.people_name = people_name;
        this.serif = serif;
        this.town_id = town_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPEOPLEDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getImgae_no() {
        return imgae_no;
    }

    public void setImgae_no(Integer imgae_no) {
        this.imgae_no = imgae_no;
    }

    public String getPeople_name() {
        return people_name;
    }

    public void setPeople_name(String people_name) {
        this.people_name = people_name;
    }

    public String getSerif() {
        return serif;
    }

    public void setSerif(String serif) {
        this.serif = serif;
    }

    public Long getTown_id() {
        return town_id;
    }

    public void setTown_id(Long town_id) {
        this.town_id = town_id;
    }

    /** To-one relationship, resolved on first access. */
    public TOWN getTOWN() {
        Long __key = this.town_id;
        if (tOWN__resolvedKey == null || !tOWN__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TOWNDao targetDao = daoSession.getTOWNDao();
            TOWN tOWNNew = targetDao.load(__key);
            synchronized (this) {
                tOWN = tOWNNew;
            	tOWN__resolvedKey = __key;
            }
        }
        return tOWN;
    }

    public void setTOWN(TOWN tOWN) {
        synchronized (this) {
            this.tOWN = tOWN;
            town_id = tOWN == null ? null : tOWN.getId();
            tOWN__resolvedKey = town_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
