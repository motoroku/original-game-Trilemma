package Trilemma;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import Trilemma.EXP_TABLEDao;
import Trilemma.TOWNDao;
import Trilemma.PEOPLEDao;
import Trilemma.DUNGEONDao;
import Trilemma.CHARACTERDao;
import Trilemma.M_ACTIONSTATUSDao;
import Trilemma.M_SKILLTYPEDao;
import Trilemma.SKILLDao;
import Trilemma.LEARNED_SKILLDao;
import Trilemma.PLAYER_STATUSDao;
import Trilemma.STORY_FLAGDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        EXP_TABLEDao.createTable(db, ifNotExists);
        TOWNDao.createTable(db, ifNotExists);
        PEOPLEDao.createTable(db, ifNotExists);
        DUNGEONDao.createTable(db, ifNotExists);
        CHARACTERDao.createTable(db, ifNotExists);
        M_ACTIONSTATUSDao.createTable(db, ifNotExists);
        M_SKILLTYPEDao.createTable(db, ifNotExists);
        SKILLDao.createTable(db, ifNotExists);
        LEARNED_SKILLDao.createTable(db, ifNotExists);
        PLAYER_STATUSDao.createTable(db, ifNotExists);
        STORY_FLAGDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        EXP_TABLEDao.dropTable(db, ifExists);
        TOWNDao.dropTable(db, ifExists);
        PEOPLEDao.dropTable(db, ifExists);
        DUNGEONDao.dropTable(db, ifExists);
        CHARACTERDao.dropTable(db, ifExists);
        M_ACTIONSTATUSDao.dropTable(db, ifExists);
        M_SKILLTYPEDao.dropTable(db, ifExists);
        SKILLDao.dropTable(db, ifExists);
        LEARNED_SKILLDao.dropTable(db, ifExists);
        PLAYER_STATUSDao.dropTable(db, ifExists);
        STORY_FLAGDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(EXP_TABLEDao.class);
        registerDaoClass(TOWNDao.class);
        registerDaoClass(PEOPLEDao.class);
        registerDaoClass(DUNGEONDao.class);
        registerDaoClass(CHARACTERDao.class);
        registerDaoClass(M_ACTIONSTATUSDao.class);
        registerDaoClass(M_SKILLTYPEDao.class);
        registerDaoClass(SKILLDao.class);
        registerDaoClass(LEARNED_SKILLDao.class);
        registerDaoClass(PLAYER_STATUSDao.class);
        registerDaoClass(STORY_FLAGDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
