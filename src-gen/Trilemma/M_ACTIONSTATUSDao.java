package Trilemma;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import Trilemma.M_ACTIONSTATUS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table M__ACTIONSTATUS.
*/
public class M_ACTIONSTATUSDao extends AbstractDao<M_ACTIONSTATUS, Long> {

    public static final String TABLENAME = "M__ACTIONSTATUS";

    /**
     * Properties of entity M_ACTIONSTATUS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Action_status = new Property(1, String.class, "action_status", false, "ACTION_STATUS");
        public final static Property To_attack = new Property(2, Integer.class, "to_attack", false, "TO_ATTACK");
        public final static Property To_defense = new Property(3, Integer.class, "to_defense", false, "TO_DEFENSE");
        public final static Property To_charge = new Property(4, Integer.class, "to_charge", false, "TO_CHARGE");
    };


    public M_ACTIONSTATUSDao(DaoConfig config) {
        super(config);
    }
    
    public M_ACTIONSTATUSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'M__ACTIONSTATUS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACTION_STATUS' TEXT," + // 1: action_status
                "'TO_ATTACK' INTEGER," + // 2: to_attack
                "'TO_DEFENSE' INTEGER," + // 3: to_defense
                "'TO_CHARGE' INTEGER);"); // 4: to_charge
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'M__ACTIONSTATUS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, M_ACTIONSTATUS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String action_status = entity.getAction_status();
        if (action_status != null) {
            stmt.bindString(2, action_status);
        }
 
        Integer to_attack = entity.getTo_attack();
        if (to_attack != null) {
            stmt.bindLong(3, to_attack);
        }
 
        Integer to_defense = entity.getTo_defense();
        if (to_defense != null) {
            stmt.bindLong(4, to_defense);
        }
 
        Integer to_charge = entity.getTo_charge();
        if (to_charge != null) {
            stmt.bindLong(5, to_charge);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public M_ACTIONSTATUS readEntity(Cursor cursor, int offset) {
        M_ACTIONSTATUS entity = new M_ACTIONSTATUS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // action_status
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // to_attack
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // to_defense
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // to_charge
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, M_ACTIONSTATUS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAction_status(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTo_attack(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTo_defense(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTo_charge(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(M_ACTIONSTATUS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(M_ACTIONSTATUS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
