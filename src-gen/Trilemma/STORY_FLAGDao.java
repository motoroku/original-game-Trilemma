package Trilemma;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import Trilemma.STORY_FLAG;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STORY__FLAG.
*/
public class STORY_FLAGDao extends AbstractDao<STORY_FLAG, Long> {

    public static final String TABLENAME = "STORY__FLAG";

    /**
     * Properties of entity STORY_FLAG.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Flag_name = new Property(1, String.class, "flag_name", false, "FLAG_NAME");
        public final static Property Story_flag = new Property(2, Boolean.class, "story_flag", false, "STORY_FLAG");
    };


    public STORY_FLAGDao(DaoConfig config) {
        super(config);
    }
    
    public STORY_FLAGDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STORY__FLAG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FLAG_NAME' TEXT," + // 1: flag_name
                "'STORY_FLAG' INTEGER);"); // 2: story_flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STORY__FLAG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, STORY_FLAG entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String flag_name = entity.getFlag_name();
        if (flag_name != null) {
            stmt.bindString(2, flag_name);
        }
 
        Boolean story_flag = entity.getStory_flag();
        if (story_flag != null) {
            stmt.bindLong(3, story_flag ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public STORY_FLAG readEntity(Cursor cursor, int offset) {
        STORY_FLAG entity = new STORY_FLAG( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // flag_name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0 // story_flag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, STORY_FLAG entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlag_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStory_flag(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(STORY_FLAG entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(STORY_FLAG entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
