package Trilemma;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import Trilemma.PLAYER;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLAYER.
*/
public class PLAYERDao extends AbstractDao<PLAYER, Long> {

    public static final String TABLENAME = "PLAYER";

    /**
     * Properties of entity PLAYER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Player_name = new Property(1, String.class, "player_name", false, "PLAYER_NAME");
        public final static Property Level = new Property(2, Integer.class, "level", false, "LEVEL");
        public final static Property Max_hp = new Property(3, Integer.class, "max_hp", false, "MAX_HP");
        public final static Property Max_skill_point = new Property(4, Integer.class, "max_skill_point", false, "MAX_SKILL_POINT");
        public final static Property Attack_power = new Property(5, Integer.class, "attack_power", false, "ATTACK_POWER");
        public final static Property Defense_power = new Property(6, Integer.class, "defense_power", false, "DEFENSE_POWER");
        public final static Property Current_gold = new Property(7, Integer.class, "current_gold", false, "CURRENT_GOLD");
        public final static Property Current_exp = new Property(8, Integer.class, "current_exp", false, "CURRENT_EXP");
        public final static Property Last_updatetime = new Property(9, java.util.Date.class, "last_updatetime", false, "LAST_UPDATETIME");
    };


    public PLAYERDao(DaoConfig config) {
        super(config);
    }
    
    public PLAYERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLAYER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "'PLAYER_NAME' TEXT," + // 1: player_name
                "'LEVEL' INTEGER," + // 2: level
                "'MAX_HP' INTEGER," + // 3: max_hp
                "'MAX_SKILL_POINT' INTEGER," + // 4: max_skill_point
                "'ATTACK_POWER' INTEGER," + // 5: attack_power
                "'DEFENSE_POWER' INTEGER," + // 6: defense_power
                "'CURRENT_GOLD' INTEGER," + // 7: current_gold
                "'CURRENT_EXP' INTEGER," + // 8: current_exp
                "'LAST_UPDATETIME' INTEGER);"); // 9: last_updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PLAYER entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String player_name = entity.getPlayer_name();
        if (player_name != null) {
            stmt.bindString(2, player_name);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(3, level);
        }
 
        Integer max_hp = entity.getMax_hp();
        if (max_hp != null) {
            stmt.bindLong(4, max_hp);
        }
 
        Integer max_skill_point = entity.getMax_skill_point();
        if (max_skill_point != null) {
            stmt.bindLong(5, max_skill_point);
        }
 
        Integer attack_power = entity.getAttack_power();
        if (attack_power != null) {
            stmt.bindLong(6, attack_power);
        }
 
        Integer defense_power = entity.getDefense_power();
        if (defense_power != null) {
            stmt.bindLong(7, defense_power);
        }
 
        Integer current_gold = entity.getCurrent_gold();
        if (current_gold != null) {
            stmt.bindLong(8, current_gold);
        }
 
        Integer current_exp = entity.getCurrent_exp();
        if (current_exp != null) {
            stmt.bindLong(9, current_exp);
        }
 
        java.util.Date last_updatetime = entity.getLast_updatetime();
        if (last_updatetime != null) {
            stmt.bindLong(10, last_updatetime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PLAYER readEntity(Cursor cursor, int offset) {
        PLAYER entity = new PLAYER( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // player_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // level
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // max_hp
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // max_skill_point
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // attack_power
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // defense_power
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // current_gold
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // current_exp
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // last_updatetime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PLAYER entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlayer_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMax_hp(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMax_skill_point(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAttack_power(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDefense_power(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCurrent_gold(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCurrent_exp(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLast_updatetime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PLAYER entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PLAYER entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
