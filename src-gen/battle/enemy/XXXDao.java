package battle.enemy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import battle.enemy.XXX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table XXX.
*/
public class XXXDao extends AbstractDao<XXX, Long> {

    public static final String TABLENAME = "XXX";

    /**
     * Properties of entity XXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Thumnail = new Property(1, String.class, "thumnail", false, "THUMNAIL");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(3, String.class, "link", false, "LINK");
        public final static Property Archives = new Property(4, String.class, "archives", false, "ARCHIVES");
        public final static Property LastUpdatetime = new Property(5, java.util.Date.class, "lastUpdatetime", false, "LAST_UPDATETIME");
    };


    public XXXDao(DaoConfig config) {
        super(config);
    }
    
    public XXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'XXX' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'THUMNAIL' TEXT NOT NULL ," + // 1: thumnail
                "'TITLE' TEXT NOT NULL ," + // 2: title
                "'LINK' TEXT NOT NULL ," + // 3: link
                "'ARCHIVES' TEXT," + // 4: archives
                "'LAST_UPDATETIME' INTEGER NOT NULL );"); // 5: lastUpdatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'XXX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XXX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getThumnail());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getLink());
 
        String archives = entity.getArchives();
        if (archives != null) {
            stmt.bindString(5, archives);
        }
        stmt.bindLong(6, entity.getLastUpdatetime().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public XXX readEntity(Cursor cursor, int offset) {
        XXX entity = new XXX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // thumnail
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // link
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // archives
            new java.util.Date(cursor.getLong(offset + 5)) // lastUpdatetime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XXX entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThumnail(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setLink(cursor.getString(offset + 3));
        entity.setArchives(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastUpdatetime(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(XXX entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(XXX entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
